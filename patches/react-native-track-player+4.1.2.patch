diff --git a/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicModule.kt b/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicModule.kt
index b2409a0..c9ab604 100644
--- a/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicModule.kt
+++ b/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicModule.kt
@@ -545,7 +545,9 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
         if (verifyServiceBoundOrReject(callback)) return@launch
 
         if (index >= 0 && index < musicService.tracks.size) {
-            callback.resolve(Arguments.fromBundle(musicService.tracks[index].originalItem))
+            // ðŸ”§ Ensure non-null Bundle for fromBundle
+            val orig: Bundle? = musicService.tracks[index].originalItem
+            callback.resolve(Arguments.fromBundle(orig ?: Bundle()))
         } else {
             callback.resolve(null)
         }
@@ -555,7 +557,12 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
     fun getQueue(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
 
-        callback.resolve(Arguments.fromList(musicService.tracks.map { it.originalItem }))
+        // ðŸ”§ Ensure list contains non-null Bundles
+        val list: List<Bundle> = musicService.tracks.map {
+            val b: Bundle? = it.originalItem
+            b ?: Bundle()
+        }
+        callback.resolve(Arguments.fromList(list))
     }
 
     @ReactMethod
@@ -585,7 +592,8 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
         callback.resolve(
             if (musicService.tracks.isEmpty()) null
             else Arguments.fromBundle(
-                musicService.tracks[musicService.getCurrentTrackIndex()].originalItem
+                // ðŸ”§ Ensure non-null
+                (musicService.tracks[musicService.getCurrentTrackIndex()].originalItem as Bundle?) ?: Bundle()
             )
         )
     }
@@ -624,6 +632,8 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
     @ReactMethod
     fun getPlaybackState(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-        callback.resolve(Arguments.fromBundle(musicService.getPlayerStateBundle(musicService.state)))
+        // ðŸ”§ Ensure non-null Bundle for fromBundle
+        val stateBundle: Bundle? = musicService.getPlayerStateBundle(musicService.state)
+        callback.resolve(Arguments.fromBundle(stateBundle ?: Bundle()))
     }
 }
