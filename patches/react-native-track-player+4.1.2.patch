diff --git a/node_modules/react-native-track-player/android/build/generated/source/buildConfig/debug/com/doublesymmetry/trackplayer/BuildConfig.java b/node_modules/react-native-track-player/android/build/generated/source/buildConfig/debug/com/doublesymmetry/trackplayer/BuildConfig.java
new file mode 100644
index 0000000..7b5e7c0
--- /dev/null
+++ b/node_modules/react-native-track-player/android/build/generated/source/buildConfig/debug/com/doublesymmetry/trackplayer/BuildConfig.java
@@ -0,0 +1,10 @@
+/**
+ * Automatically generated file. DO NOT MODIFY
+ */
+package com.doublesymmetry.trackplayer;
+
+public final class BuildConfig {
+  public static final boolean DEBUG = Boolean.parseBoolean("true");
+  public static final String LIBRARY_PACKAGE_NAME = "com.doublesymmetry.trackplayer";
+  public static final String BUILD_TYPE = "debug";
+}
diff --git a/node_modules/react-native-track-player/android/build/intermediates/compile_r_class_jar/debug/generateDebugRFile/R.jar b/node_modules/react-native-track-player/android/build/intermediates/compile_r_class_jar/debug/generateDebugRFile/R.jar
new file mode 100644
index 0000000..42d3912
Binary files /dev/null and b/node_modules/react-native-track-player/android/build/intermediates/compile_r_class_jar/debug/generateDebugRFile/R.jar differ
diff --git a/node_modules/react-native-track-player/android/build/intermediates/compile_symbol_list/debug/generateDebugRFile/R.txt b/node_modules/react-native-track-player/android/build/intermediates/compile_symbol_list/debug/generateDebugRFile/R.txt
new file mode 100644
index 0000000..80e4515
--- /dev/null
+++ b/node_modules/react-native-track-player/android/build/intermediates/compile_symbol_list/debug/generateDebugRFile/R.txt
@@ -0,0 +1,4 @@
+int drawable forward 0x0
+int drawable rewind 0x0
+int string rntp_temporary_channel_id 0x0
+int string rntp_temporary_channel_name 0x0
diff --git a/node_modules/react-native-track-player/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties b/node_modules/react-native-track-player/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties
new file mode 100644
index 0000000..cbe9bfd
--- /dev/null
+++ b/node_modules/react-native-track-player/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties
@@ -0,0 +1,3 @@
+#Thu Oct 02 20:28:02 UZT 2025
+com.doublesymmetry.trackplayer.react-native-track-player-main-6\:/drawable/forward.xml=D\:\\cambridge_app\\node_modules\\react-native-track-player\\android\\build\\intermediates\\packaged_res\\debug\\packageDebugResources\\drawable\\forward.xml
+com.doublesymmetry.trackplayer.react-native-track-player-main-6\:/drawable/rewind.xml=D\:\\cambridge_app\\node_modules\\react-native-track-player\\android\\build\\intermediates\\packaged_res\\debug\\packageDebugResources\\drawable\\rewind.xml
diff --git a/node_modules/react-native-track-player/android/build/intermediates/incremental/debug/packageDebugResources/merged.dir/values/values.xml b/node_modules/react-native-track-player/android/build/intermediates/incremental/debug/packageDebugResources/merged.dir/values/values.xml
new file mode 100644
index 0000000..80a694d
--- /dev/null
+++ b/node_modules/react-native-track-player/android/build/intermediates/incremental/debug/packageDebugResources/merged.dir/values/values.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="rntp_temporary_channel_id">rntp_temporary_channel</string>
+    <string name="rntp_temporary_channel_name">temporary_channel</string>
+</resources>
\ No newline at end of file
diff --git a/node_modules/react-native-track-player/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml b/node_modules/react-native-track-player/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml
new file mode 100644
index 0000000..ffdc371
--- /dev/null
+++ b/node_modules/react-native-track-player/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="main$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="D:\cambridge_app\node_modules\react-native-track-player\android\src\main\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="main" generated-set="main$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="D:\cambridge_app\node_modules\react-native-track-player\android\src\main\res"><file name="forward" path="D:\cambridge_app\node_modules\react-native-track-player\android\src\main\res\drawable\forward.xml" qualifiers="" type="drawable"/><file name="rewind" path="D:\cambridge_app\node_modules\react-native-track-player\android\src\main\res\drawable\rewind.xml" qualifiers="" type="drawable"/><file path="D:\cambridge_app\node_modules\react-native-track-player\android\src\main\res\values\strings.xml" qualifiers=""><string name="rntp_temporary_channel_id">rntp_temporary_channel</string><string name="rntp_temporary_channel_name">temporary_channel</string></file></source></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="debug$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="D:\cambridge_app\node_modules\react-native-track-player\android\src\debug\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="debug" generated-set="debug$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="D:\cambridge_app\node_modules\react-native-track-player\android\src\debug\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="generated$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="D:\cambridge_app\node_modules\react-native-track-player\android\build\generated\res\resValues\debug"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="generated" generated-set="generated$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="D:\cambridge_app\node_modules\react-native-track-player\android\build\generated\res\resValues\debug"/></dataSet><mergedItems/></merger>
\ No newline at end of file
diff --git a/node_modules/react-native-track-player/android/build/intermediates/local_only_symbol_list/debug/parseDebugLocalResources/R-def.txt b/node_modules/react-native-track-player/android/build/intermediates/local_only_symbol_list/debug/parseDebugLocalResources/R-def.txt
new file mode 100644
index 0000000..3655221
--- /dev/null
+++ b/node_modules/react-native-track-player/android/build/intermediates/local_only_symbol_list/debug/parseDebugLocalResources/R-def.txt
@@ -0,0 +1,6 @@
+R_DEF: Internal format may change without notice
+local
+drawable forward
+drawable rewind
+string rntp_temporary_channel_id
+string rntp_temporary_channel_name
diff --git a/node_modules/react-native-track-player/android/build/intermediates/nested_resources_validation_report/debug/generateDebugResources/nestedResourcesValidationReport.txt b/node_modules/react-native-track-player/android/build/intermediates/nested_resources_validation_report/debug/generateDebugResources/nestedResourcesValidationReport.txt
new file mode 100644
index 0000000..08f4ebe
--- /dev/null
+++ b/node_modules/react-native-track-player/android/build/intermediates/nested_resources_validation_report/debug/generateDebugResources/nestedResourcesValidationReport.txt
@@ -0,0 +1 @@
+0 Warning/Error
\ No newline at end of file
diff --git a/node_modules/react-native-track-player/android/build/intermediates/packaged_res/debug/packageDebugResources/drawable/forward.xml b/node_modules/react-native-track-player/android/build/intermediates/packaged_res/debug/packageDebugResources/drawable/forward.xml
new file mode 100644
index 0000000..32e3663
--- /dev/null
+++ b/node_modules/react-native-track-player/android/build/intermediates/packaged_res/debug/packageDebugResources/drawable/forward.xml
@@ -0,0 +1,5 @@
+<vector android:autoMirrored="true" android:height="24dp"
+    android:tint="#FFFFFF" android:viewportHeight="24"
+    android:viewportWidth="24" android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="@android:color/white" android:pathData="M18,13c0,3.31 -2.69,6 -6,6s-6,-2.69 -6,-6s2.69,-6 6,-6v4l5,-5l-5,-5v4c-4.42,0 -8,3.58 -8,8c0,4.42 3.58,8 8,8c4.42,0 8,-3.58 8,-8H18z"/>
+    </vector>
diff --git a/node_modules/react-native-track-player/android/build/intermediates/packaged_res/debug/packageDebugResources/drawable/rewind.xml b/node_modules/react-native-track-player/android/build/intermediates/packaged_res/debug/packageDebugResources/drawable/rewind.xml
new file mode 100644
index 0000000..99c06c4
--- /dev/null
+++ b/node_modules/react-native-track-player/android/build/intermediates/packaged_res/debug/packageDebugResources/drawable/rewind.xml
@@ -0,0 +1,5 @@
+<vector android:autoMirrored="true" android:height="24dp"
+    android:tint="#FFFFFF" android:viewportHeight="24"
+    android:viewportWidth="24" android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="@android:color/white" android:pathData="M12,5V1L7,6l5,5V7c3.31,0 6,2.69 6,6s-2.69,6 -6,6 -6,-2.69 -6,-6H4c0,4.42 3.58,8 8,8s8,-3.58 8,-8 -3.58,-8 -8,-8z"/>
+</vector>
diff --git a/node_modules/react-native-track-player/android/build/intermediates/packaged_res/debug/packageDebugResources/values/values.xml b/node_modules/react-native-track-player/android/build/intermediates/packaged_res/debug/packageDebugResources/values/values.xml
new file mode 100644
index 0000000..80a694d
--- /dev/null
+++ b/node_modules/react-native-track-player/android/build/intermediates/packaged_res/debug/packageDebugResources/values/values.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="rntp_temporary_channel_id">rntp_temporary_channel</string>
+    <string name="rntp_temporary_channel_name">temporary_channel</string>
+</resources>
\ No newline at end of file
diff --git a/node_modules/react-native-track-player/android/build/intermediates/symbol_list_with_package_name/debug/generateDebugRFile/package-aware-r.txt b/node_modules/react-native-track-player/android/build/intermediates/symbol_list_with_package_name/debug/generateDebugRFile/package-aware-r.txt
new file mode 100644
index 0000000..d16dca5
--- /dev/null
+++ b/node_modules/react-native-track-player/android/build/intermediates/symbol_list_with_package_name/debug/generateDebugRFile/package-aware-r.txt
@@ -0,0 +1,5 @@
+com.doublesymmetry.trackplayer
+drawable forward
+drawable rewind
+string rntp_temporary_channel_id
+string rntp_temporary_channel_name
diff --git a/node_modules/react-native-track-player/android/build/kotlin/compileDebugKotlin/cacheable/dirty-sources.txt b/node_modules/react-native-track-player/android/build/kotlin/compileDebugKotlin/cacheable/dirty-sources.txt
new file mode 100644
index 0000000..83a6bbd
--- /dev/null
+++ b/node_modules/react-native-track-player/android/build/kotlin/compileDebugKotlin/cacheable/dirty-sources.txt
@@ -0,0 +1,17 @@
+D:\cambridge_app\node_modules\react-native-track-player\android\src\main\java\com\doublesymmetry\trackplayer\extensions\NumberExt.kt
+D:\cambridge_app\node_modules\react-native-track-player\android\src\main\java\com\doublesymmetry\trackplayer\model\TrackMetadata.kt
+D:\cambridge_app\node_modules\react-native-track-player\android\src\main\java\com\doublesymmetry\trackplayer\utils\RejectionException.kt
+D:\cambridge_app\node_modules\react-native-track-player\android\src\main\java\com\doublesymmetry\trackplayer\extensions\EnumExtensions.kt
+D:\cambridge_app\node_modules\react-native-track-player\android\src\main\java\com\doublesymmetry\trackplayer\model\PlaybackMetadata.kt
+D:\cambridge_app\node_modules\react-native-track-player\android\src\main\java\com\doublesymmetry\trackplayer\extensions\AudioPlayerStateExt.kt
+D:\cambridge_app\node_modules\react-native-track-player\android\src\main\java\com\doublesymmetry\trackplayer\model\Track.kt
+D:\cambridge_app\node_modules\react-native-track-player\android\src\main\java\com\doublesymmetry\trackplayer\TrackPlayer.kt
+D:\cambridge_app\node_modules\react-native-track-player\android\src\main\java\com\doublesymmetry\trackplayer\module\MusicEvents.kt
+D:\cambridge_app\node_modules\react-native-track-player\android\src\main\java\com\doublesymmetry\trackplayer\model\NowPlayingMetadata.kt
+D:\cambridge_app\node_modules\react-native-track-player\android\src\main\java\com\doublesymmetry\trackplayer\model\MetadataAdapter.kt
+D:\cambridge_app\node_modules\react-native-track-player\android\src\main\java\com\doublesymmetry\trackplayer\module\MusicModule.kt
+D:\cambridge_app\node_modules\react-native-track-player\android\src\main\java\com\doublesymmetry\trackplayer\utils\BundleUtils.kt
+D:\cambridge_app\node_modules\react-native-track-player\android\src\main\java\com\doublesymmetry\trackplayer\model\State.kt
+D:\cambridge_app\node_modules\react-native-track-player\android\src\main\java\com\doublesymmetry\trackplayer\model\TrackAudioItem.kt
+D:\cambridge_app\node_modules\react-native-track-player\android\src\main\java\com\doublesymmetry\trackplayer\service\MusicService.kt
+D:\cambridge_app\node_modules\react-native-track-player\android\src\main\java\com\doublesymmetry\trackplayer\utils\AppForegroundTracker.kt
\ No newline at end of file
diff --git a/node_modules/react-native-track-player/android/build/kotlin/compileDebugKotlin/local-state/build-history.bin b/node_modules/react-native-track-player/android/build/kotlin/compileDebugKotlin/local-state/build-history.bin
new file mode 100644
index 0000000..88bad47
Binary files /dev/null and b/node_modules/react-native-track-player/android/build/kotlin/compileDebugKotlin/local-state/build-history.bin differ
diff --git a/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicModule.kt b/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicModule.kt
index b2409a0..dbb9691 100644
--- a/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicModule.kt
+++ b/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicModule.kt
@@ -25,12 +25,9 @@ import timber.log.Timber
 import java.util.*
 import javax.annotation.Nonnull
 
-
-/**
- * @author Milen Pivchev @mpivchev
- */
 class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaModule(reactContext),
     ServiceConnection {
+
     private var playerOptions: Bundle? = null
     private var isServiceBound = false
     private var playerSetUpPromise: Promise? = null
@@ -39,9 +36,7 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
     private val context = reactContext
 
     @Nonnull
-    override fun getName(): String {
-        return "TrackPlayerModule"
-    }
+    override fun getName(): String = "TrackPlayerModule"
 
     override fun initialize() {
         Timber.plant(Timber.DebugTree())
@@ -50,30 +45,20 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
 
     override fun onServiceConnected(name: ComponentName, service: IBinder) {
         scope.launch {
-            // If a binder already exists, don't get a new one
             if (!::musicService.isInitialized) {
                 val binder: MusicService.MusicBinder = service as MusicService.MusicBinder
                 musicService = binder.service
                 musicService.setupPlayer(playerOptions)
                 playerSetUpPromise?.resolve(null)
             }
-
             isServiceBound = true
         }
     }
 
-    /**
-     * Called when a connection to the Service has been lost.
-     */
     override fun onServiceDisconnected(name: ComponentName) {
-        scope.launch {
-            isServiceBound = false
-        }
+        scope.launch { isServiceBound = false }
     }
 
-    /**
-     * Checks wither service is bound, or rejects. Returns whether promise was rejected.
-     */
     private fun verifyServiceBoundOrReject(promise: Promise): Boolean {
         if (!isServiceBound) {
             promise.reject(
@@ -82,7 +67,6 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
             )
             return true
         }
-
         return false
     }
 
@@ -92,28 +76,21 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
 
     private fun rejectWithException(callback: Promise, exception: Exception) {
         when (exception) {
-            is RejectionException -> {
-                callback.reject(exception.code, exception)
-            }
-            else -> {
-                callback.reject("runtime_exception", exception)
-            }
+            is RejectionException -> callback.reject(exception.code, exception)
+            else -> callback.reject("runtime_exception", exception)
         }
     }
 
     private fun readableArrayToTrackList(data: ReadableArray?): MutableList<Track> {
         val bundleList = Arguments.toList(data)
-        if (bundleList !is ArrayList) {
+        if (bundleList !is ArrayList<*>) {
             throw RejectionException("invalid_parameter", "Was not given an array of tracks")
         }
         return bundleList.map {
             if (it is Bundle) {
                 bundleToTrack(it)
             } else {
-                throw RejectionException(
-                    "invalid_track_object",
-                    "Track was not a dictionary type"
-                )
+                throw RejectionException("invalid_track_object", "Track was not a dictionary type")
             }
         }.toMutableList()
     }
@@ -128,7 +105,7 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
             this["CAPABILITY_PAUSE"] = Capability.PAUSE.ordinal
             this["CAPABILITY_STOP"] = Capability.STOP.ordinal
             this["CAPABILITY_SEEK_TO"] = Capability.SEEK_TO.ordinal
-            this["CAPABILITY_SKIP"] = OnErrorAction.SKIP.ordinal
+            this["CAPABILITY_SKIP"] = Capability.SKIP.ordinal
             this["CAPABILITY_SKIP_TO_NEXT"] = Capability.SKIP_TO_NEXT.ordinal
             this["CAPABILITY_SKIP_TO_PREVIOUS"] = Capability.SKIP_TO_PREVIOUS.ordinal
             this["CAPABILITY_SET_RATING"] = Capability.SET_RATING.ordinal
@@ -169,7 +146,6 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
             return
         }
 
-        // prevent crash Fatal Exception: android.app.RemoteServiceException$ForegroundServiceDidNotStartInTimeException
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O && AppForegroundTracker.backgrounded) {
             promise.reject(
                 "android_cannot_setup_player_in_background",
@@ -178,7 +154,6 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
             return
         }
 
-        // Validate buffer keys.
         val bundledData = Arguments.toBundle(data)
         val minBuffer =
             bundledData?.getDouble(MusicService.MIN_BUFFER_KEY)?.toMilliseconds()?.toInt()
@@ -194,41 +169,25 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
                 ?: DEFAULT_BACK_BUFFER_DURATION_MS
 
         if (playBuffer < 0) {
-            promise.reject(
-                "play_buffer_error",
-                "The value for playBuffer should be greater than or equal to zero."
-            )
+            promise.reject("play_buffer_error", "The value for playBuffer should be greater than or equal to zero.")
             return
         }
-
         if (backBuffer < 0) {
-            promise.reject(
-                "back_buffer_error",
-                "The value for backBuffer should be greater than or equal to zero."
-            )
+            promise.reject("back_buffer_error", "The value for backBuffer should be greater than or equal to zero.")
             return
         }
-
         if (minBuffer < playBuffer) {
-            promise.reject(
-                "min_buffer_error",
-                "The value for minBuffer should be greater than or equal to playBuffer."
-            )
+            promise.reject("min_buffer_error", "The value for minBuffer should be greater than or equal to playBuffer.")
             return
         }
-
         if (maxBuffer < minBuffer) {
-            promise.reject(
-                "min_buffer_error",
-                "The value for maxBuffer should be greater than or equal to minBuffer."
-            )
+            promise.reject("min_buffer_error", "The value for maxBuffer should be greater than or equal to minBuffer.")
             return
         }
 
         playerSetUpPromise = promise
         playerOptions = bundledData
 
-
         LocalBroadcastManager.getInstance(context).registerReceiver(
             MusicEvents(context),
             IntentFilter(EVENT_INTENT)
@@ -253,34 +212,25 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
     @ReactMethod
     fun updateOptions(data: ReadableMap?, callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         val options = Arguments.toBundle(data)
-
-        options?.let {
-            musicService.updateOptions(it)
-        }
-
+        options?.let { musicService.updateOptions(it) }
         callback.resolve(null)
     }
 
     @ReactMethod
     fun add(data: ReadableArray?, insertBeforeIndex: Int, callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         try {
-            val tracks = readableArrayToTrackList(data);
+            val tracks = readableArrayToTrackList(data)
             if (insertBeforeIndex < -1 || insertBeforeIndex > musicService.tracks.size) {
                 callback.reject("index_out_of_bounds", "The track index is out of bounds")
                 return@launch
             }
             val index = if (insertBeforeIndex == -1) musicService.tracks.size else insertBeforeIndex
-            musicService.add(
-                tracks,
-                index
-            )
+            musicService.add(tracks, index)
             callback.resolve(index)
-        } catch (exception: Exception) {
-            rejectWithException(callback, exception)
+        } catch (e: Exception) {
+            rejectWithException(callback, e)
         }
     }
 
@@ -291,7 +241,7 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
             callback.resolve(null)
             return@launch
         }
-        val bundle = Arguments.toBundle(data);
+        val bundle = Arguments.toBundle(data)
         if (bundle is Bundle) {
             musicService.load(bundleToTrack(bundle))
             callback.resolve(null)
@@ -313,14 +263,11 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
         val inputIndexes = Arguments.toList(data)
         if (inputIndexes != null) {
             val size = musicService.tracks.size
-            val indexes: ArrayList<Int> = ArrayList();
+            val indexes = ArrayList<Int>()
             for (inputIndex in inputIndexes) {
                 val index = if (inputIndex is Int) inputIndex else inputIndex.toString().toInt()
                 if (index < 0 || index >= size) {
-                    callback.reject(
-                        "index_out_of_bounds",
-                        "One or more indexes was out of bounds"
-                    )
+                    callback.reject("index_out_of_bounds", "One or more indexes was out of bounds")
                     return@launch
                 }
                 indexes.add(index)
@@ -331,45 +278,43 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
     }
 
     @ReactMethod
-    fun updateMetadataForTrack(index: Int, map: ReadableMap?, callback: Promise) =
-        scope.launch {
-            if (verifyServiceBoundOrReject(callback)) return@launch
-
-            if (index < 0 || index >= musicService.tracks.size) {
-                callback.reject("index_out_of_bounds", "The index is out of bounds")
-            } else {
-                val context: ReactContext = context
-                val track = musicService.tracks[index]
-                track.setMetadata(context, Arguments.toBundle(map), musicService.ratingType)
-                musicService.updateMetadataForTrack(index, track)
+    fun updateMetadataForTrack(index: Int, map: ReadableMap?, callback: Promise) = scope.launch {
+        if (verifyServiceBoundOrReject(callback)) return@launch
 
-                callback.resolve(null)
-            }
+        if (index < 0 || index >= musicService.tracks.size) {
+            callback.reject("index_out_of_bounds", "The index is out of bounds")
+        } else {
+            val track = musicService.tracks[index]
+            val meta: Bundle = Arguments.toBundle(map) ?: Bundle()
+            track.setMetadata(context, meta, musicService.ratingType)
+            musicService.updateMetadataForTrack(index, track)
+            callback.resolve(null)
         }
+    }
 
     @ReactMethod
     fun updateNowPlayingMetadata(map: ReadableMap?, callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
 
-        if (musicService.tracks.isEmpty())
+        if (musicService.tracks.isEmpty()) {
             callback.reject("no_current_item", "There is no current item in the player")
+            return@launch
+        }
 
-        val context: ReactContext = context
         Arguments.toBundle(map)?.let {
             val track = bundleToTrack(it)
             musicService.updateNowPlayingMetadata(track)
         }
-
         callback.resolve(null)
     }
 
     @ReactMethod
     fun clearNowPlayingMetadata(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
-        if (musicService.tracks.isEmpty())
+        if (musicService.tracks.isEmpty()) {
             callback.reject("no_current_item", "There is no current item in the player")
-
+            return@launch
+        }
         musicService.clearNotificationMetadata()
         callback.resolve(null)
     }
@@ -377,7 +322,6 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
     @ReactMethod
     fun removeUpcomingTracks(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         musicService.removeUpcomingTracks()
         callback.resolve(null)
     }
@@ -385,57 +329,39 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
     @ReactMethod
     fun skip(index: Int, initialTime: Float, callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         musicService.skip(index)
-
-        if (initialTime >= 0) {
-            musicService.seekTo(initialTime)
-        }
-
+        if (initialTime >= 0) musicService.seekTo(initialTime)
         callback.resolve(null)
     }
 
     @ReactMethod
     fun skipToNext(initialTime: Float, callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         musicService.skipToNext()
-
-        if (initialTime >= 0) {
-            musicService.seekTo(initialTime)
-        }
-
+        if (initialTime >= 0) musicService.seekTo(initialTime)
         callback.resolve(null)
     }
 
     @ReactMethod
     fun skipToPrevious(initialTime: Float, callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         musicService.skipToPrevious()
-
-        if (initialTime >= 0) {
-            musicService.seekTo(initialTime)
-        }
-
+        if (initialTime >= 0) musicService.seekTo(initialTime)
         callback.resolve(null)
     }
 
     @ReactMethod
     fun reset(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         musicService.stop()
-        delay(300) // Allow playback to stop
+        delay(300)
         musicService.clear()
-
         callback.resolve(null)
     }
 
     @ReactMethod
     fun play(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         musicService.play()
         callback.resolve(null)
     }
@@ -443,7 +369,6 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
     @ReactMethod
     fun pause(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         musicService.pause()
         callback.resolve(null)
     }
@@ -451,7 +376,6 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
     @ReactMethod
     fun stop(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         musicService.stop()
         callback.resolve(null)
     }
@@ -459,7 +383,6 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
     @ReactMethod
     fun seekTo(seconds: Float, callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         musicService.seekTo(seconds)
         callback.resolve(null)
     }
@@ -467,7 +390,6 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
     @ReactMethod
     fun seekBy(offset: Float, callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         musicService.seekBy(offset)
         callback.resolve(null)
     }
@@ -475,7 +397,6 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
     @ReactMethod
     fun retry(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         musicService.retry()
         callback.resolve(null)
     }
@@ -483,7 +404,6 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
     @ReactMethod
     fun setVolume(volume: Float, callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         musicService.setVolume(volume)
         callback.resolve(null)
     }
@@ -491,14 +411,12 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
     @ReactMethod
     fun getVolume(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         callback.resolve(musicService.getVolume())
     }
 
     @ReactMethod
     fun setRate(rate: Float, callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         musicService.setRate(rate)
         callback.resolve(null)
     }
@@ -506,14 +424,12 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
     @ReactMethod
     fun getRate(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         callback.resolve(musicService.getRate())
     }
 
     @ReactMethod
     fun setRepeatMode(mode: Int, callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         musicService.setRepeatMode(RepeatMode.fromOrdinal(mode))
         callback.resolve(null)
     }
@@ -521,14 +437,12 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
     @ReactMethod
     fun getRepeatMode(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         callback.resolve(musicService.getRepeatMode().ordinal)
     }
 
     @ReactMethod
     fun setPlayWhenReady(playWhenReady: Boolean, callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         musicService.playWhenReady = playWhenReady
         callback.resolve(null)
     }
@@ -536,16 +450,15 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
     @ReactMethod
     fun getPlayWhenReady(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         callback.resolve(musicService.playWhenReady)
     }
 
     @ReactMethod
     fun getTrack(index: Int, callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         if (index >= 0 && index < musicService.tracks.size) {
-            callback.resolve(Arguments.fromBundle(musicService.tracks[index].originalItem))
+            val orig: Bundle = musicService.tracks[index].originalItem ?: Bundle()
+            callback.resolve(Arguments.fromBundle(orig))
         } else {
             callback.resolve(null)
         }
@@ -554,70 +467,66 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
     @ReactMethod
     fun getQueue(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
-        callback.resolve(Arguments.fromList(musicService.tracks.map { it.originalItem }))
+        // null-safe list
+        val list = musicService.tracks.map { it.originalItem ?: Bundle() }
+        callback.resolve(Arguments.fromList(list))
     }
 
     @ReactMethod
     fun setQueue(data: ReadableArray?, callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         try {
             musicService.clear()
             musicService.add(readableArrayToTrackList(data))
             callback.resolve(null)
-        } catch (exception: Exception) {
-            rejectWithException(callback, exception)
+        } catch (e: Exception) {
+            rejectWithException(callback, e)
         }
     }
 
     @ReactMethod
     fun getActiveTrackIndex(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-        callback.resolve(
-            if (musicService.tracks.isEmpty()) null else musicService.getCurrentTrackIndex()
-        )
+        callback.resolve(if (musicService.tracks.isEmpty()) null else musicService.getCurrentTrackIndex())
     }
 
     @ReactMethod
     fun getActiveTrack(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-        callback.resolve(
-            if (musicService.tracks.isEmpty()) null
-            else Arguments.fromBundle(
-                musicService.tracks[musicService.getCurrentTrackIndex()].originalItem
-            )
-        )
+        if (musicService.tracks.isEmpty()) {
+            callback.resolve(null)
+        } else {
+            val idx = musicService.getCurrentTrackIndex()
+            val orig: Bundle = musicService.tracks[idx].originalItem ?: Bundle()
+            callback.resolve(Arguments.fromBundle(orig))
+        }
     }
 
     @ReactMethod
     fun getDuration(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         callback.resolve(musicService.getDurationInSeconds())
     }
 
     @ReactMethod
     fun getBufferedPosition(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         callback.resolve(musicService.getBufferedPositionInSeconds())
     }
 
     @ReactMethod
     fun getPosition(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-
         callback.resolve(musicService.getPositionInSeconds())
     }
 
     @ReactMethod
     fun getProgress(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
-        var bundle = Bundle()
-        bundle.putDouble("duration", musicService.getDurationInSeconds());
-        bundle.putDouble("position", musicService.getPositionInSeconds());
-        bundle.putDouble("buffered", musicService.getBufferedPositionInSeconds());
+        val bundle = Bundle()
+        bundle.putDouble("duration", musicService.getDurationInSeconds())
+        bundle.putDouble("position", musicService.getPositionInSeconds())
+        bundle.putDouble("buffered", musicService.getBufferedPositionInSeconds())
         callback.resolve(Arguments.fromBundle(bundle))
     }
 
